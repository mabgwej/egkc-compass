apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-deployment
  namespace: {{ .Values.app.namespace }}
  labels:
    {{- include "esgh.labels" . | nindent 4 }}
    {{- if .Values.app.micrometer.enable }}
    apm: micrometer
    {{- end}}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- toYaml .Values.app.labels | nindent 6 }}
      {{- if .Values.app.micrometer.enable }}
      apm: micrometer
      {{- end}}
  template:
    metadata:
      {{- if .Values.app.micrometer.enable }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: {{ .Values.app.containers.prometheusPath }}
        prometheus.io/port:  "8080"
        prometheus.istio.io/merge-metrics: "false"
      {{- end }}
      labels:
        {{- toYaml .Values.app.labels | nindent 8 }}
        {{- if .Values.app.micrometer.enable }}
        apm: micrometer
        {{- end}}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.app.appDynamics.enable }}
      initContainers:
      - command:
        - cp
        - -ra
        - /opt/appdynamics/.
        - /opt/temp
        image: appdynamics/java-agent:latest
        imagePullPolicy: IfNotPresent
        name: appd-agent-attach
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /opt/temp
          name: appd-agent-repo-java
      restartPolicy: Always
      schedulerName: default-scheduler
      {{- end }}
      serviceAccountName: {{ include "esgh.serviceAccountName" . }}
      containers:
      - name: {{ .Release.Name }}
        image: "{{ .Values.global.image.repository }}/{{ .Values.app.containers.image }}"
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        envFrom:
        - configMapRef:
            name: {{ $.Release.Name }}-configmap
        volumeMounts:
        - name: models-volume
          mountPath: "{{ .Values.app.persistentVolumeClaimCSI.mountPath }}"
          subPath: "{{ .Values.app.persistentVolumeClaimCSI.mountPathSubPath }}"
        # - name: json-datafiles-volume
        #   mountPath: "{{ .Values.app.persistentVolumeClaimCSI.mountPathJsonFiles }}"
        #   subPath: "{{ .Values.app.persistentVolumeClaimCSI.mountPathJsonFilesSubPath }}"
        ports:
          - name: {{ .Values.app.containers.portName | default "http" }}
            containerPort: {{ .Values.app.containers.port }}
            protocol: TCP
        resources:
          {{- toYaml .Values.app.resources | nindent 12 }}
        readinessProbe:
          # tcpSocket:
          #   port: 3000
          # exec:
          #   command: 
          #   - curl
          #   - localhost:3000
          httpGet:
            path: {{ .Values.app.containers.readinessEndpoint }}
            port: {{ .Values.app.containers.port }}
          initialDelaySeconds: {{ .Values.app.containers.initialDelaySeconds_ready }}
          timeoutSeconds: {{ .Values.app.containers.timeoutSeconds_ready }}
          periodSeconds: {{ .Values.app.containers.periodSeconds_ready }}
          successThreshold: {{ .Values.app.containers.successThreshold_ready }}
          failureThreshold: {{ .Values.app.containers.failureThreshold_ready }}
        livenessProbe:
          # tcpSocket:
          #   port: 3000
          # exec:
          #   command: 
          #   - curl
          #   - localhost:3000
          httpGet:
            path: {{ .Values.app.containers.livenessEndpoint }}
            port: {{ .Values.app.containers.port }}
          initialDelaySeconds: {{ .Values.app.containers.initialDelaySeconds_live }}
          timeoutSeconds: {{ .Values.app.containers.timeoutSeconds_live }}
          periodSeconds: {{ .Values.app.containers.periodSeconds_live }}
          successThreshold: {{ .Values.app.containers.successThreshold_live }}
          failureThreshold: {{ .Values.app.containers.failureThreshold_live }}
      securityContext:
          runAsUser: {{ .Values.global.securityContext.runAsUser }}
          runAsGroup: {{ .Values.global.securityContext.runAsGroup }}
          fsGroup: {{ .Values.global.securityContext.fsGroup }}
          supplementalGroups: 
            - {{ .Values.global.securityContext.supplementalGroups }}
      volumes:
      {{- if .Values.app.persistentVolumeCSI.enable }}
      - name: models-volume
        persistentVolumeClaim:
          claimName: {{ .Values.app.appcode }}-{{ .Release.Name }}-{{ .Values.app.containers.envCode }}-pvc-csi
      {{- end }}
